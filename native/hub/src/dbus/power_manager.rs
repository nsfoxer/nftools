// This code was autogenerated with `dbus-codegen-rust -c nonblock -d org.freedesktop.PowerManagement.Inhibit -p /org/freedesktop/PowerManagement/Inhibit`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::nonblock;

pub trait OrgFreedesktopPowerManagement {
    fn suspend(&self) -> nonblock::MethodReply<()>;
    fn hibernate(&self) -> nonblock::MethodReply<()>;
    fn can_suspend(&self) -> nonblock::MethodReply<bool>;
    fn can_hibernate(&self) -> nonblock::MethodReply<bool>;
    fn can_hybrid_suspend(&self) -> nonblock::MethodReply<bool>;
    fn can_suspend_then_hibernate(&self) -> nonblock::MethodReply<bool>;
    fn get_power_save_status(&self) -> nonblock::MethodReply<bool>;
}

#[derive(Debug)]
pub struct OrgFreedesktopPowerManagementCanSuspendChanged {
    pub can_suspend: bool,
}

impl arg::AppendAll for OrgFreedesktopPowerManagementCanSuspendChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.can_suspend, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPowerManagementCanSuspendChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPowerManagementCanSuspendChanged {
            can_suspend: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPowerManagementCanSuspendChanged {
    const NAME: &'static str = "CanSuspendChanged";
    const INTERFACE: &'static str = "org.freedesktop.PowerManagement";
}

#[derive(Debug)]
pub struct OrgFreedesktopPowerManagementCanHibernateChanged {
    pub can_hibernate: bool,
}

impl arg::AppendAll for OrgFreedesktopPowerManagementCanHibernateChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.can_hibernate, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPowerManagementCanHibernateChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPowerManagementCanHibernateChanged {
            can_hibernate: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPowerManagementCanHibernateChanged {
    const NAME: &'static str = "CanHibernateChanged";
    const INTERFACE: &'static str = "org.freedesktop.PowerManagement";
}

#[derive(Debug)]
pub struct OrgFreedesktopPowerManagementCanHybridSuspendChanged {
    pub can_hybrid_suspend: bool,
}

impl arg::AppendAll for OrgFreedesktopPowerManagementCanHybridSuspendChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.can_hybrid_suspend, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPowerManagementCanHybridSuspendChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPowerManagementCanHybridSuspendChanged {
            can_hybrid_suspend: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPowerManagementCanHybridSuspendChanged {
    const NAME: &'static str = "CanHybridSuspendChanged";
    const INTERFACE: &'static str = "org.freedesktop.PowerManagement";
}

#[derive(Debug)]
pub struct OrgFreedesktopPowerManagementCanSuspendThenHibernateChanged {
    pub can_suspend_then_hibernate: bool,
}

impl arg::AppendAll for OrgFreedesktopPowerManagementCanSuspendThenHibernateChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.can_suspend_then_hibernate, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPowerManagementCanSuspendThenHibernateChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPowerManagementCanSuspendThenHibernateChanged {
            can_suspend_then_hibernate: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPowerManagementCanSuspendThenHibernateChanged {
    const NAME: &'static str = "CanSuspendThenHibernateChanged";
    const INTERFACE: &'static str = "org.freedesktop.PowerManagement";
}

#[derive(Debug)]
pub struct OrgFreedesktopPowerManagementPowerSaveStatusChanged {
    pub save_power: bool,
}

impl arg::AppendAll for OrgFreedesktopPowerManagementPowerSaveStatusChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.save_power, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPowerManagementPowerSaveStatusChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPowerManagementPowerSaveStatusChanged {
            save_power: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPowerManagementPowerSaveStatusChanged {
    const NAME: &'static str = "PowerSaveStatusChanged";
    const INTERFACE: &'static str = "org.freedesktop.PowerManagement";
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopPowerManagement for nonblock::Proxy<'a, C> {

    fn suspend(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.PowerManagement", "Suspend", ())
    }

    fn hibernate(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.PowerManagement", "Hibernate", ())
    }

    fn can_suspend(&self) -> nonblock::MethodReply<bool> {
        self.method_call("org.freedesktop.PowerManagement", "CanSuspend", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn can_hibernate(&self) -> nonblock::MethodReply<bool> {
        self.method_call("org.freedesktop.PowerManagement", "CanHibernate", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn can_hybrid_suspend(&self) -> nonblock::MethodReply<bool> {
        self.method_call("org.freedesktop.PowerManagement", "CanHybridSuspend", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn can_suspend_then_hibernate(&self) -> nonblock::MethodReply<bool> {
        self.method_call("org.freedesktop.PowerManagement", "CanSuspendThenHibernate", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }

    fn get_power_save_status(&self) -> nonblock::MethodReply<bool> {
        self.method_call("org.freedesktop.PowerManagement", "GetPowerSaveStatus", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopPowerManagementInhibit {
    fn inhibit(&self, application: &str, reason: &str) -> nonblock::MethodReply<u32>;
    fn un_inhibit(&self, cookie: u32) -> nonblock::MethodReply<()>;
    fn has_inhibit(&self) -> nonblock::MethodReply<bool>;
}

#[derive(Debug)]
pub struct OrgFreedesktopPowerManagementInhibitHasInhibitChanged {
    pub has_inhibit: bool,
}

impl arg::AppendAll for OrgFreedesktopPowerManagementInhibitHasInhibitChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.has_inhibit, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPowerManagementInhibitHasInhibitChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPowerManagementInhibitHasInhibitChanged {
            has_inhibit: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPowerManagementInhibitHasInhibitChanged {
    const NAME: &'static str = "HasInhibitChanged";
    const INTERFACE: &'static str = "org.freedesktop.PowerManagement.Inhibit";
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopPowerManagementInhibit for nonblock::Proxy<'a, C> {

    fn inhibit(&self, application: &str, reason: &str) -> nonblock::MethodReply<u32> {
        self.method_call("org.freedesktop.PowerManagement.Inhibit", "Inhibit", (application, reason, ))
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn un_inhibit(&self, cookie: u32) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.PowerManagement.Inhibit", "UnInhibit", (cookie, ))
    }

    fn has_inhibit(&self) -> nonblock::MethodReply<bool> {
        self.method_call("org.freedesktop.PowerManagement.Inhibit", "HasInhibit", ())
            .and_then(|r: (bool, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> nonblock::MethodReply<()>;
    fn get_all(&self, interface_name: &str) -> nonblock::MethodReply<arg::PropMap>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusProperties for nonblock::Proxy<'a, C> {

    fn get(&self, interface_name: &str, property_name: &str) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, value, ))
    }

    fn get_all(&self, interface_name: &str) -> nonblock::MethodReply<arg::PropMap> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for nonblock::Proxy<'a, C> {

    fn introspect(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> nonblock::MethodReply<()>;
    fn get_machine_id(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusPeer for nonblock::Proxy<'a, C> {

    fn ping(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}
