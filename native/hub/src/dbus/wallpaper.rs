// This code was autogenerated with `dbus-codegen-rust -c nonblock -d org.kde.plasmashell -p /PlasmaShell`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::nonblock;

pub trait OrgKdePlasmaShell {
    fn toggle_dashboard(&self) -> nonblock::MethodReply<()>;
    fn toggle_activity_manager(&self) -> nonblock::MethodReply<()>;
    fn toggle_widget_explorer(&self) -> nonblock::MethodReply<()>;
    fn set_dashboard_shown(&self, show: bool) -> nonblock::MethodReply<()>;
    fn evaluate_script(&self, script: &str) -> nonblock::MethodReply<String>;
    fn color(&self) -> nonblock::MethodReply<u32>;
    fn dump_current_layout_js(&self) -> nonblock::MethodReply<Vec<u8>>;
    fn load_look_and_feel_default_layout(&self, layout: &str) -> nonblock::MethodReply<()>;
    fn activate_launcher_menu(&self) -> nonblock::MethodReply<()>;
    fn refresh_current_shell(&self) -> nonblock::MethodReply<()>;
    fn wallpaper(&self, screen_num: u32) -> nonblock::MethodReply<arg::PropMap>;
    fn set_wallpaper(&self, wallpaper_plugin: &str, parameters: arg::PropMap, screen_num: u32) -> nonblock::MethodReply<()>;
    fn edit_mode(&self) -> nonblock::MethodReply<bool>;
    fn setedit_mode(&self, value: bool) -> nonblock::MethodReply<()>;
}

#[derive(Debug)]
pub struct OrgKdePlasmaShellWallpaperChanged {
    pub screen_num: u32,
}

impl arg::AppendAll for OrgKdePlasmaShellWallpaperChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.screen_num, i);
    }
}

impl arg::ReadAll for OrgKdePlasmaShellWallpaperChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdePlasmaShellWallpaperChanged {
            screen_num: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdePlasmaShellWallpaperChanged {
    const NAME: &'static str = "wallpaperChanged";
    const INTERFACE: &'static str = "org.kde.PlasmaShell";
}

#[derive(Debug)]
pub struct OrgKdePlasmaShellColorChanged {
    pub changed_color: String,
}

impl arg::AppendAll for OrgKdePlasmaShellColorChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.changed_color, i);
    }
}

impl arg::ReadAll for OrgKdePlasmaShellColorChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdePlasmaShellColorChanged {
            changed_color: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdePlasmaShellColorChanged {
    const NAME: &'static str = "colorChanged";
    const INTERFACE: &'static str = "org.kde.PlasmaShell";
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgKdePlasmaShell for nonblock::Proxy<'a, C> {

    fn toggle_dashboard(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.PlasmaShell", "toggleDashboard", ())
    }

    fn toggle_activity_manager(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.PlasmaShell", "toggleActivityManager", ())
    }

    fn toggle_widget_explorer(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.PlasmaShell", "toggleWidgetExplorer", ())
    }

    fn set_dashboard_shown(&self, show: bool) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.PlasmaShell", "setDashboardShown", (show, ))
    }

    fn evaluate_script(&self, script: &str) -> nonblock::MethodReply<String> {
        self.method_call("org.kde.PlasmaShell", "evaluateScript", (script, ))
            .and_then(|r: (String, )| Ok(r.0, ))
    }

    fn color(&self) -> nonblock::MethodReply<u32> {
        self.method_call("org.kde.PlasmaShell", "color", ())
            .and_then(|r: (u32, )| Ok(r.0, ))
    }

    fn dump_current_layout_js(&self) -> nonblock::MethodReply<Vec<u8>> {
        self.method_call("org.kde.PlasmaShell", "dumpCurrentLayoutJS", ())
            .and_then(|r: (Vec<u8>, )| Ok(r.0, ))
    }

    fn load_look_and_feel_default_layout(&self, layout: &str) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.PlasmaShell", "loadLookAndFeelDefaultLayout", (layout, ))
    }

    fn activate_launcher_menu(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.PlasmaShell", "activateLauncherMenu", ())
    }

    fn refresh_current_shell(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.PlasmaShell", "refreshCurrentShell", ())
    }

    fn wallpaper(&self, screen_num: u32) -> nonblock::MethodReply<arg::PropMap> {
        self.method_call("org.kde.PlasmaShell", "wallpaper", (screen_num, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }

    fn set_wallpaper(&self, wallpaper_plugin: &str, parameters: arg::PropMap, screen_num: u32) -> nonblock::MethodReply<()> {
        self.method_call("org.kde.PlasmaShell", "setWallpaper", (wallpaper_plugin, parameters, screen_num, ))
    }

    fn edit_mode(&self) -> nonblock::MethodReply<bool> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::get(self, "org.kde.PlasmaShell", "editMode")
    }

    fn setedit_mode(&self, value: bool) -> nonblock::MethodReply<()> {
        <Self as nonblock::stdintf::org_freedesktop_dbus::Properties>::set(self, "org.kde.PlasmaShell", "editMode", value)
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get(&self, interface_name: &str, property_name: &str) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>>;
    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> nonblock::MethodReply<()>;
    fn get_all(&self, interface_name: &str) -> nonblock::MethodReply<arg::PropMap>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusProperties for nonblock::Proxy<'a, C> {

    fn get(&self, interface_name: &str, property_name: &str) -> nonblock::MethodReply<arg::Variant<Box<dyn arg::RefArg + 'static>>> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<Box<dyn arg::RefArg + 'static>>, )| Ok(r.0, ))
    }

    fn set(&self, interface_name: &str, property_name: &str, value: arg::Variant<Box<dyn arg::RefArg>>) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, value, ))
    }

    fn get_all(&self, interface_name: &str) -> nonblock::MethodReply<arg::PropMap> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for nonblock::Proxy<'a, C> {

    fn introspect(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> nonblock::MethodReply<()>;
    fn get_machine_id(&self) -> nonblock::MethodReply<String>;
}

impl<'a, T: nonblock::NonblockReply, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusPeer for nonblock::Proxy<'a, C> {

    fn ping(&self) -> nonblock::MethodReply<()> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> nonblock::MethodReply<String> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}
